{"ast":null,"code":"var _jsxFileName = \"/home/iassure/iAssureIT/node_react/wealthyvia/wealthyvia/webApp/admin/src/admin/Reports/MonthlyReport.js\";\nimport React, { Component } from 'react';\nimport IAssureTable from \"../../coreAdmin/IAssureTable/IAssureTable.jsx\";\nexport default class MonthlyReport extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"reportData\": [],\n      \"twoLevelHeader\": this.props.twoLevelHeader,\n      \"tableHeading\": this.props.tableHeading,\n      \"tableObjects\": this.props.tableObjects,\n      \"tableDatas\": this.props.tableDatas,\n      \"startRange\": 0,\n      \"limitRange\": 10\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.dataTableList();\n    this.setState({\n      tableData: this.state.tableDatas.slice(this.state.startRange, this.state.limitRange)\n    });\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.reportData) {\n      this.setState({\n        reportData: nextProps.reportData\n      });\n    }\n  }\n\n  handleChange(event) {\n    event.preventDefault();\n    const target = event.target;\n    const name = target.name;\n    this.setState({\n      [name]: event.target.value\n    });\n  }\n\n  currentMonth() {\n    // var monthSession = Session.get('selectedMonth');\n    // if(monthSession){\n    // \tvar currentMonth = monthSession;\n    // }\telse{\n    // \tvar today = moment().startOf('month');\n    // \tvar yyyy = moment(today).format(\"YYYY\");\n    //     var monthNum = moment(today).format(\"MM\");\n    //     var currentMonth = yyyy+\"-\"+monthNum;\n    // \tSession.set(\"selectedMonth\",currentMonth);\n    // \t}\n    var d = new Date();\n    var currentMonth = d.getFullYear() + ' - ' + d.getMonth();\n    return currentMonth;\n  }\n\n  previousMonth(event) {// event.preventDefault();\n    // var selectedMonth = $(\".inputmonthlyValue\").val();\n    // var newMonthDt = moment(selectedMonth).subtract(1, 'months').format(\"YYYY-MM-DD\");\n    // var newMonthNumber = moment(newMonthDt).format(\"MM\");\n    // //Construct the WeekNumber string as 'YYYY-MM'\n    // var yearNum=moment(newMonthDt).format(\"YYYY\");\n    // var newMonth = yearNum+\"-\"+newMonthNumber;\n    // Session.set('selectedMonth', newMonth);\n  }\n\n  nextMonth(event) {// event.preventDefault();\n    // var selectedMonth = $(\".inputmonthlyValue\").val();\n    // var newMonthDt = moment(selectedMonth).add(1, 'months').format(\"YYYY-MM-DD\");\n    // var newMonthNumber = moment(newMonthDt).format(\"MM\");\n    // //Construct the WeekNumber string as 'YYYY-MM'\n    // var yearNum=moment(newMonthDt).format(\"YYYY\");\n    // var newMonth = yearNum+\"-\"+newMonthNumber;\n    // Session.set('selectedMonth', newMonth);\n  }\n\n  dataTableList() {// var monthDateFromSess = Session.get(\"selectedMonth\");\n    //       var monthDateStart = new Date(moment(monthDateFromSess).month(\"YYYY-MM\"));//Find out first day of month with selectedMonth\n    //       var monthDateToEnd = new Date(moment(monthDateFromSess).add(1,\"M\"));\n    // var reportData = [];\n    //       if(this.props.selectedCategory){\n    //           if(this.props.selectedSubCategory){\n    //               reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: this.props.selectedCategory, subCategory: this.props.selectedSubCategory}}}, {sort: {'createdAt': -1}}).fetch();\n    //           }else{\n    //               reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: this.props.selectedCategory}}}, {sort: {'createdAt': -1}}).fetch();\n    //           }\n    //       }else{\n    //           reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid'}, {sort: {'createdAt': -1}}).fetch();\n    //       }\n    // this.setState({\n    //           reportData : reportData\n    //       });\n  }\n\n  getData(startRange, limitRange) {\n    this.setState({\n      tableData: this.state.tableDatas.slice(parseInt(startRange), parseInt(limitRange))\n    }, () => {\n      console.log('tableData', this.state.tableData);\n    });\n  }\n\n  getSearchText(searchText, startRange, limitRange) {\n    console.log(searchText, startRange, limitRange);\n    this.setState({\n      tableData: []\n    });\n  }\n\n  render() {\n    if (!this.props.loading) {\n      return React.createElement(\"div\", {\n        className: \"col-lg-12 col-md-12 col-sm-12 col-xs-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sales-report-main-class\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-boxmain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-boxsec\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Monthly Reports\"), React.createElement(\"div\", {\n        className: \"input-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        onClick: this.previousMonth.bind(this),\n        className: \"commonReportArrowPoiner input-group-addon\",\n        id: \"basic-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-chevron-circle-left\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        onChange: this.handleChange,\n        value: this.currentMonth(),\n        name: \"inputmonthlyValue\",\n        type: \"text\",\n        className: \"inputmonthlyValue reportsDateRef form-control\",\n        placeholder: \"\",\n        \"aria-label\": \"Brand\",\n        \"aria-describedby\": \"basic-addon1\",\n        ref: \"inputmonthlyValue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        onClick: this.nextMonth.bind(this),\n        className: \"commonReportArrowPoiner input-group-addon\",\n        id: \"basic-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-chevron-circle-right\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"report-list-downloadMain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(IAssureTable, {\n        completeDataCount: this.state.tableDatas.length,\n        twoLevelHeader: this.state.twoLevelHeader,\n        editId: this.state.editSubId,\n        getData: this.getData.bind(this),\n        tableHeading: this.state.tableHeading,\n        tableData: this.state.tableData,\n        tableObjects: this.state.tableObjects,\n        getSearchText: this.getSearchText.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }))));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"col-sm-12 col-xs-12 col-lg-8 col-lg-offset-4 col-md-12 loadingImg loaderDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"ldrImageforbulk\",\n        src: \"/images/loadersglms.gif\",\n        alt: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }));\n    }\n  }\n\n} // export default MonthlyListContainer = withTracker(props =>{\n//     var monthDateFromSess = Session.get(\"selectedMonth\");\n//     var monthDateStart = new Date(moment(monthDateFromSess).month(\"YYYY-MM\"));\n//     var monthDateToEnd = new Date(moment(monthDateFromSess).add(1,\"M\"));\n//     const reportHandle = Meteor.subscribe(\"OrdersData\");\n//     var reportData = [];\n//     if(props.selectedCategory){\n//         if(props.selectedSubCategory){\n//             reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: props.selectedCategory, subCategory: props.selectedSubCategory}}}, {sort: {'createdAt': -1}}).fetch();\n//         }else{\n//             reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: props.selectedCategory}}}, {sort: {'createdAt': -1}}).fetch();\n//         }\n//     }else{\n//         reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid'}, {sort: {'createdAt': -1}}).fetch();\n//     }\n//     const loading = !reportHandle.ready();\n// return{\n//     loading,\n//     reportData,\n// };\n// })(CategoryWiseReportsMonthlyList);","map":{"version":3,"sources":["/home/iassure/iAssureIT/node_react/wealthyvia/wealthyvia/webApp/admin/src/admin/Reports/MonthlyReport.js"],"names":["React","Component","IAssureTable","MonthlyReport","constructor","props","state","twoLevelHeader","tableHeading","tableObjects","tableDatas","handleChange","bind","componentDidMount","dataTableList","setState","tableData","slice","startRange","limitRange","componentWillReceiveProps","nextProps","reportData","event","preventDefault","target","name","value","currentMonth","d","Date","getFullYear","getMonth","previousMonth","nextMonth","getData","parseInt","console","log","getSearchText","searchText","render","loading","length","editSubId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport IAssureTable           from \"../../coreAdmin/IAssureTable/IAssureTable.jsx\";\nexport default class MonthlyReport extends Component{\n\tconstructor(props){\n        super(props);\n        this.state = {\n            \"reportData\":[],\n            \"twoLevelHeader\"    : this.props.twoLevelHeader,\n            \"tableHeading\"      : this.props.tableHeading,\n            \"tableObjects\"      : this.props.tableObjects,\n            \"tableDatas\"        : this.props.tableDatas,\n            \"startRange\"        : 0,\n            \"limitRange\"        : 10\n        }\n        this.handleChange = this.handleChange.bind(this);\n        \n    }\n\n    componentDidMount(){\n        this.dataTableList();\n        this.setState({\n            tableData : this.state.tableDatas.slice(this.state.startRange, this.state.limitRange),\n        });\n        this.handleChange = this.handleChange.bind(this);\n        \n    }\n    componentWillReceiveProps(nextProps){\n        if(nextProps.reportData){\n            this.setState({\n                reportData : nextProps.reportData\n            });\n        }\n    }\n    handleChange(event){\n        event.preventDefault();\n       const target = event.target;\n       const name = target.name;\n\n       this.setState({\n           [name] : event.target.value,\n       });\n   }\n\n    currentMonth(){\n\t\t// var monthSession = Session.get('selectedMonth');\n\t\t// if(monthSession){\n\t\t// \tvar currentMonth = monthSession;\n\t\t// }\telse{\n\t\t// \tvar today = moment().startOf('month');\n\t\t// \tvar yyyy = moment(today).format(\"YYYY\");\n\t\t//     var monthNum = moment(today).format(\"MM\");\n\t\t//     var currentMonth = yyyy+\"-\"+monthNum;\n\t\t// \tSession.set(\"selectedMonth\",currentMonth);\n\t\t// \t}\n        var d = new Date();\n        var currentMonth = d.getFullYear()+' - '+d.getMonth();\n\t\treturn currentMonth;\n\t}\n\n\tpreviousMonth(event){\n\t\t// event.preventDefault();\n\t\t// var selectedMonth = $(\".inputmonthlyValue\").val();\n\t\t// var newMonthDt = moment(selectedMonth).subtract(1, 'months').format(\"YYYY-MM-DD\");\n\t\t// var newMonthNumber = moment(newMonthDt).format(\"MM\");\n\t\t// //Construct the WeekNumber string as 'YYYY-MM'\n\t\t// var yearNum=moment(newMonthDt).format(\"YYYY\");\n\t\t// var newMonth = yearNum+\"-\"+newMonthNumber;\n\n\t\t// Session.set('selectedMonth', newMonth);\n\t}\n\n\tnextMonth(event){\n\t\t// event.preventDefault();\n\t\t// var selectedMonth = $(\".inputmonthlyValue\").val();\n\t\t// var newMonthDt = moment(selectedMonth).add(1, 'months').format(\"YYYY-MM-DD\");\n\t\t// var newMonthNumber = moment(newMonthDt).format(\"MM\");\n\t\t// //Construct the WeekNumber string as 'YYYY-MM'\n\t\t// var yearNum=moment(newMonthDt).format(\"YYYY\");\n\t\t// var newMonth = yearNum+\"-\"+newMonthNumber;\n\n\t\t// Session.set('selectedMonth', newMonth);\n\t}\n   \n\n\n    dataTableList(){\n\t\t// var monthDateFromSess = Session.get(\"selectedMonth\");\n\n  //       var monthDateStart = new Date(moment(monthDateFromSess).month(\"YYYY-MM\"));//Find out first day of month with selectedMonth\n  //       var monthDateToEnd = new Date(moment(monthDateFromSess).add(1,\"M\"));\n\n\t\t// var reportData = [];\n  //       if(this.props.selectedCategory){\n  //           if(this.props.selectedSubCategory){\n  //               reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: this.props.selectedCategory, subCategory: this.props.selectedSubCategory}}}, {sort: {'createdAt': -1}}).fetch();\n  //           }else{\n  //               reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: this.props.selectedCategory}}}, {sort: {'createdAt': -1}}).fetch();\n  //           }\n  //       }else{\n  //           reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid'}, {sort: {'createdAt': -1}}).fetch();\n  //       }\n\t\t// this.setState({\n  //           reportData : reportData\n  //       });\n    }\n    \n    getData(startRange, limitRange){\n        this.setState({\n            tableData : this.state.tableDatas.slice(parseInt(startRange), parseInt(limitRange)),\n        },()=>{\n            console.log('tableData',this.state.tableData);\n        });\n    }\n    getSearchText(searchText, startRange, limitRange){\n        console.log(searchText, startRange, limitRange);\n        this.setState({\n            tableData : []\n        });\n    }\n    render(){\n        if(!this.props.loading){\n            return( \n                <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div className=\"sales-report-main-class\">\n                        <div className=\"reports-select-date-boxmain\">\n                            <div className=\"reports-select-date-boxsec\">\n                                <div className=\"reports-select-date-Title\">Monthly Reports</div>\n                                <div className=\"input-group\">\n                                    <span onClick={this.previousMonth.bind(this)} className=\"commonReportArrowPoiner input-group-addon\" id=\"basic-addon1\"><i className=\"fa fa-chevron-circle-left\" aria-hidden=\"true\"></i></span>\n                                    <input onChange={this.handleChange}  value={this.currentMonth()} name=\"inputmonthlyValue\" type=\"text\" className=\"inputmonthlyValue reportsDateRef form-control\" placeholder=\"\" aria-label=\"Brand\" aria-describedby=\"basic-addon1\" ref=\"inputmonthlyValue\"  />\n                                    <span onClick={this.nextMonth.bind(this)} className=\"commonReportArrowPoiner input-group-addon\" id=\"basic-addon1\"><i className=\"fa fa-chevron-circle-right\" aria-hidden=\"true\"></i></span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"report-list-downloadMain\">\n                            <IAssureTable \n                                completeDataCount={this.state.tableDatas.length}\n                                twoLevelHeader={this.state.twoLevelHeader} \n                                editId={this.state.editSubId} \n                                getData={this.getData.bind(this)} \n                                tableHeading={this.state.tableHeading} \n                                tableData={this.state.tableData} \n                                tableObjects={this.state.tableObjects}\n                                getSearchText={this.getSearchText.bind(this)}/>\n                        </div>\n                    </div>\n                </div>            \n            );\n        }else{\n            return(\n                <div className=\"col-sm-12 col-xs-12 col-lg-8 col-lg-offset-4 col-md-12 loadingImg loaderDiv\"><img className=\"ldrImageforbulk\" src=\"/images/loadersglms.gif\" alt=\"loading\"/></div>\n            );\n        } \n    }\n}\n// export default MonthlyListContainer = withTracker(props =>{\n//     var monthDateFromSess = Session.get(\"selectedMonth\");\n//     var monthDateStart = new Date(moment(monthDateFromSess).month(\"YYYY-MM\"));\n//     var monthDateToEnd = new Date(moment(monthDateFromSess).add(1,\"M\"));\n\n//     const reportHandle = Meteor.subscribe(\"OrdersData\");\n//     var reportData = [];\n//     if(props.selectedCategory){\n//         if(props.selectedSubCategory){\n//             reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: props.selectedCategory, subCategory: props.selectedSubCategory}}}, {sort: {'createdAt': -1}}).fetch();\n//         }else{\n//             reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: props.selectedCategory}}}, {sort: {'createdAt': -1}}).fetch();\n//         }\n//     }else{\n//         reportData =  Orders.find({'createdAt':{$gte : monthDateStart, $lt : monthDateToEnd }, 'status' : 'Paid'}, {sort: {'createdAt': -1}}).fetch();\n//     }\n//     const loading = !reportHandle.ready();\n// return{\n//     loading,\n//     reportData,\n// };\n// })(CategoryWiseReportsMonthlyList);"]},"metadata":{},"sourceType":"module"}