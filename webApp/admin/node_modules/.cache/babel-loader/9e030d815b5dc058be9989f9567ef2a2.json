{"ast":null,"code":"var _jsxFileName = \"/home/iassure/iAssureIT/node_react/wealthyvia/wealthyvia/webApp/admin/src/admin/Reports/CustomisedReport.js\";\nimport React, { Component } from 'react';\nimport IAssureTable from \"../../coreAdmin/IAssureTable/IAssureTable.jsx\";\nexport default class CustomisedReport extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"reportData\": [],\n      \"twoLevelHeader\": this.props.twoLevelHeader,\n      \"tableHeading\": this.props.tableHeading,\n      \"tableObjects\": this.props.tableObjects,\n      \"tableDatas\": this.props.tableDatas,\n      \"startRange\": 0,\n      \"limitRange\": 10\n    };\n    this.handleFromChange = this.handleFromChange.bind(this);\n    this.handleToChange = this.handleToChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.dataTableList();\n    this.setState({\n      tableData: this.state.tableDatas.slice(this.state.startRange, this.state.limitRange)\n    });\n    this.handleFromChange = this.handleFromChange.bind(this);\n    this.handleToChange = this.handleToChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.reportData) {\n      this.setState({\n        reportData: nextProps.reportData\n      });\n    }\n  }\n\n  handleFromChange(event) {\n    event.preventDefault();\n    const target = event.target;\n    const name = target.name;\n    this.setState({\n      [name]: event.target.value\n    });\n    var dateVal = event.target.value;\n    var dateUpdate = new Date(dateVal); // Session.set('newFromDate',dateUpdate);\n  }\n\n  handleToChange(event) {\n    event.preventDefault();\n    const target = event.target;\n    const name = target.name;\n    this.setState({\n      [name]: event.target.value\n    });\n    var dateVal = event.target.value;\n    var dateUpdate = new Date(dateVal); // Session.set('newToDate',dateUpdate);\n  }\n\n  currentFromDate() {// if(Session.get('newFromDate')){\n    //     var today = Session.get('newFromDate');\n    // } else {\n    //     var today = new Date();\n    // }\n    // var dd = today.getDate();\n    // var mm = today.getMonth()+1; //January is 0!\n    // var yyyy = today.getFullYear();\n    // if(dd<10){\n    //     dd='0'+dd;\n    // }\n    // if(mm<10){\n    //     mm='0'+mm;\n    // }\n    // var today = yyyy+'-'+mm+'-'+dd;\n    // var today = yyyy+'-'+mm+'-'+dd;\n    // return today;\n  }\n\n  currentToDate() {// if(Session.get('newToDate')){\n    //     var today = Session.get('newToDate');\n    // } else {\n    //     var today = new Date();\n    // }\n    // // var today = new Date();\n    // var dd = today.getDate();\n    // var mm = today.getMonth()+1; //January is 0!\n    // var yyyy = today.getFullYear();\n    // if(dd<10){\n    //     dd='0'+dd;\n    // }\n    // if(mm<10){\n    //     mm='0'+mm;\n    // }\n    // var today = yyyy+'-'+mm+'-'+dd;\n    // var today = yyyy+'-'+mm+'-'+dd;\n    // return today;\n  }\n\n  dataTableList() {//       var selectedDateFrom = Session.get('newFromDate');\n    // if(selectedDateFrom){\n    // \tvar newDateFrom  = new Date(selectedDateFrom);\n    // }else{\n    // \tvar newDateFrom  = new Date();\n    // }\n    //       var selectedDateTo = Session.get('newToDate');\n    // if(selectedDateTo){\n    // \tvar newDateTo  = new Date(selectedDateTo);\n    // }else{\n    // \tvar newDateTo  = new Date();\n    //       }\n    // var reportData = [];\n    //       if(this.props.selectedCategory){\n    //           if(this.props.selectedSubCategory){\n    //               reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: this.props.selectedCategory, subCategory: this.props.selectedSubCategory}}}, {sort: {'createdAt': -1}}).fetch();\n    //           }else{\n    //               reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: this.props.selectedCategory}}}, {sort: {'createdAt': -1}}).fetch();\n    //           }\n    //       }else{\n    //           reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid'}, {sort: {'createdAt': -1}}).fetch();\n    //       }\n    //       this.setState({\n    //           reportData : reportData\n    //       });\n  }\n\n  getData(startRange, limitRange) {\n    this.setState({\n      tableData: this.state.tableDatas.slice(parseInt(startRange), parseInt(limitRange))\n    }, () => {\n      console.log('tableData', this.state.tableData);\n    });\n  }\n\n  getSearchText(searchText, startRange, limitRange) {\n    console.log(searchText, startRange, limitRange);\n    this.setState({\n      tableData: []\n    });\n  }\n\n  render() {\n    if (!this.props.loading) {\n      return React.createElement(\"div\", {\n        className: \"col-lg-12 col-md-12 col-sm-12 col-xs-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sales-report-main-class\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-boxmain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-boxsec\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Customized Sales Report\"), React.createElement(\"div\", {\n        className: \"reports-select-date-fromto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-from1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-from2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"From\"), React.createElement(\"div\", {\n        className: \"reports-select-date-from3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: this.handleFromChange,\n        name: \"fromDateCustomised\",\n        ref: \"fromDateCustomised\",\n        value: this.currentFromDate(),\n        type: \"date\",\n        className: \"reportsDateRef form-control\",\n        placeholder: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"reports-select-date-to1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"reports-select-date-to2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"To\"), React.createElement(\"div\", {\n        className: \"reports-select-date-to3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: this.handleToChange,\n        name: \"toDateCustomised\",\n        ref: \"toDateCustomised\",\n        value: this.currentToDate(),\n        type: \"date\",\n        className: \"reportsDateRef form-control\",\n        placeholder: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })))))), React.createElement(\"div\", {\n        className: \"report-list-downloadMain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(IAssureTable, {\n        completeDataCount: this.state.tableDatas.length,\n        twoLevelHeader: this.state.twoLevelHeader,\n        editId: this.state.editSubId,\n        getData: this.getData.bind(this),\n        tableHeading: this.state.tableHeading,\n        tableData: this.state.tableData,\n        tableObjects: this.state.tableObjects,\n        getSearchText: this.getSearchText.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }))));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"col-sm-12 col-xs-12 col-lg-8 col-lg-offset-4 col-md-12 loadingImg loaderDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"ldrImageforbulk\",\n        src: \"/images/loadersglms.gif\",\n        alt: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }));\n    }\n  }\n\n} // CustomisedList = withTracker(props =>{\n//     var selectedDateFrom = Session.get('newFromDate');\n//     if(selectedDateFrom){\n//         var newDateFrom  = new Date(selectedDateFrom);\n//     }else{\n//         var newDateFrom  = new Date();\n//     }\n//     var selectedDateTo = Session.get('newToDate');\n//     if(selectedDateTo){\n//         var newDateTo  = new Date(selectedDateTo);\n//     }else{\n//         var newDateTo  = new Date();\n//     }\n//     const reportHandle = Meteor.subscribe(\"OrdersData\");\n//     var reportData = [];\n//     if(props.selectedCategory){\n//         if(props.selectedSubCategory){\n//             reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: props.selectedCategory, subCategory: props.selectedSubCategory}}}, {sort: {'createdAt': -1}}).fetch();\n//         }else{\n//             reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: props.selectedCategory}}}, {sort: {'createdAt': -1}}).fetch();\n//         }\n//     }else{\n//         reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid'}, {sort: {'createdAt': -1}}).fetch();\n//     }\n//     const loading = !reportHandle.ready();\n// return{\n//     loading,\n//     reportData,\n// };\n// })(CategoryWiseReportsCustomisedList);","map":{"version":3,"sources":["/home/iassure/iAssureIT/node_react/wealthyvia/wealthyvia/webApp/admin/src/admin/Reports/CustomisedReport.js"],"names":["React","Component","IAssureTable","CustomisedReport","constructor","props","state","twoLevelHeader","tableHeading","tableObjects","tableDatas","handleFromChange","bind","handleToChange","componentDidMount","dataTableList","setState","tableData","slice","startRange","limitRange","componentWillReceiveProps","nextProps","reportData","event","preventDefault","target","name","value","dateVal","dateUpdate","Date","currentFromDate","currentToDate","getData","parseInt","console","log","getSearchText","searchText","render","loading","length","editSubId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAiC,+CAAjC;AAEA,eAAe,MAAMC,gBAAN,SAA+BF,SAA/B,CAAwC;AACtDG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACX,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACT,oBAAa,EADJ;AAET,wBAAsB,KAAKD,KAAL,CAAWE,cAFxB;AAGT,sBAAsB,KAAKF,KAAL,CAAWG,YAHxB;AAIT,sBAAsB,KAAKH,KAAL,CAAWI,YAJxB;AAKT,oBAAsB,KAAKJ,KAAL,CAAWK,UALxB;AAMT,oBAAsB,CANb;AAOT,oBAAsB;AAPb,KAAb;AAUA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AAEH;;AAEDE,EAAAA,iBAAiB,GAAE;AACf,SAAKC,aAAL;AACA,SAAKC,QAAL,CAAc;AACVC,MAAAA,SAAS,EAAG,KAAKX,KAAL,CAAWI,UAAX,CAAsBQ,KAAtB,CAA4B,KAAKZ,KAAL,CAAWa,UAAvC,EAAmD,KAAKb,KAAL,CAAWc,UAA9D;AADF,KAAd;AAGA,SAAKT,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AAEH;;AACDS,EAAAA,yBAAyB,CAACC,SAAD,EAAW;AAChC,QAAGA,SAAS,CAACC,UAAb,EAAwB;AACpB,WAAKP,QAAL,CAAc;AACVO,QAAAA,UAAU,EAAGD,SAAS,CAACC;AADb,OAAd;AAGH;AACJ;;AACDZ,EAAAA,gBAAgB,CAACa,KAAD,EAAO;AACnBA,IAAAA,KAAK,CAACC,cAAN;AACD,UAAMC,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,UAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AAEA,SAAKX,QAAL,CAAc;AACV,OAACW,IAAD,GAASH,KAAK,CAACE,MAAN,CAAaE;AADZ,KAAd;AAIA,QAAIC,OAAO,GAAGL,KAAK,CAACE,MAAN,CAAaE,KAA3B;AACA,QAAIE,UAAU,GAAG,IAAIC,IAAJ,CAASF,OAAT,CAAjB,CAVoB,CAWpB;AACF;;AACDhB,EAAAA,cAAc,CAACW,KAAD,EAAO;AACjBA,IAAAA,KAAK,CAACC,cAAN;AACD,UAAMC,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,UAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AAEA,SAAKX,QAAL,CAAc;AACV,OAACW,IAAD,GAASH,KAAK,CAACE,MAAN,CAAaE;AADZ,KAAd;AAIA,QAAIC,OAAO,GAAGL,KAAK,CAACE,MAAN,CAAaE,KAA3B;AACA,QAAIE,UAAU,GAAG,IAAIC,IAAJ,CAASF,OAAT,CAAjB,CAVkB,CAWlB;AACF;;AAEDG,EAAAA,eAAe,GAAE,CACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH;;AAEDC,EAAAA,aAAa,GAAE,CACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH;;AAEDlB,EAAAA,aAAa,GAAE,CAGjB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;;AACDmB,EAAAA,OAAO,CAACf,UAAD,EAAaC,UAAb,EAAwB;AAC3B,SAAKJ,QAAL,CAAc;AACVC,MAAAA,SAAS,EAAG,KAAKX,KAAL,CAAWI,UAAX,CAAsBQ,KAAtB,CAA4BiB,QAAQ,CAAChB,UAAD,CAApC,EAAkDgB,QAAQ,CAACf,UAAD,CAA1D;AADF,KAAd,EAEE,MAAI;AACFgB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwB,KAAK/B,KAAL,CAAWW,SAAnC;AACH,KAJD;AAKH;;AACDqB,EAAAA,aAAa,CAACC,UAAD,EAAapB,UAAb,EAAyBC,UAAzB,EAAoC;AAC7CgB,IAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ,EAAwBpB,UAAxB,EAAoCC,UAApC;AACA,SAAKJ,QAAL,CAAc;AACVC,MAAAA,SAAS,EAAG;AADF,KAAd;AAGH;;AACDuB,EAAAA,MAAM,GAAE;AACJ,QAAG,CAAC,KAAKnC,KAAL,CAAWoC,OAAf,EAAuB;AACnB,aACI;AAAK,QAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,EAEI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAII;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,QAAQ,EAAE,KAAK9B,gBAAtB;AAAwC,QAAA,IAAI,EAAC,oBAA7C;AAAkE,QAAA,GAAG,EAAC,oBAAtE;AAA2F,QAAA,KAAK,EAAE,KAAKqB,eAAL,EAAlG;AAA0H,QAAA,IAAI,EAAC,MAA/H;AAAsI,QAAA,SAAS,EAAC,6BAAhJ;AAA8K,QAAA,WAAW,EAAC,EAA1L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,CADJ,EASI;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAII;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,QAAQ,EAAE,KAAKnB,cAAtB;AAAsC,QAAA,IAAI,EAAC,kBAA3C;AAA8D,QAAA,GAAG,EAAC,kBAAlE;AAAqF,QAAA,KAAK,EAAE,KAAKoB,aAAL,EAA5F;AAAkH,QAAA,IAAI,EAAC,MAAvH;AAA8H,QAAA,SAAS,EAAC,6BAAxI;AAAsK,QAAA,WAAW,EAAC,EAAlL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,CATJ,CAFJ,CADJ,CADJ,EAyBI;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AACI,QAAA,iBAAiB,EAAE,KAAK3B,KAAL,CAAWI,UAAX,CAAsBgC,MAD7C;AAEI,QAAA,cAAc,EAAE,KAAKpC,KAAL,CAAWC,cAF/B;AAGI,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWqC,SAHvB;AAII,QAAA,OAAO,EAAE,KAAKT,OAAL,CAAatB,IAAb,CAAkB,IAAlB,CAJb;AAKI,QAAA,YAAY,EAAE,KAAKN,KAAL,CAAWE,YAL7B;AAMI,QAAA,SAAS,EAAE,KAAKF,KAAL,CAAWW,SAN1B;AAOI,QAAA,YAAY,EAAE,KAAKX,KAAL,CAAWG,YAP7B;AAQI,QAAA,aAAa,EAAE,KAAK6B,aAAL,CAAmB1B,IAAnB,CAAwB,IAAxB,CARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAzBJ,CADJ,CADJ;AA0CH,KA3CD,MA2CK;AACD,aACI;AAAK,QAAA,SAAS,EAAC,6EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6F;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,GAAG,EAAC,yBAArC;AAA+D,QAAA,GAAG,EAAC,SAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA7F,CADJ;AAGH;AACJ;;AArMkD,C,CAuMvD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport IAssureTable         from \"../../coreAdmin/IAssureTable/IAssureTable.jsx\";\n\nexport default class CustomisedReport extends Component{\n\tconstructor(props){\n        super(props);\n        this.state = {\n            \"reportData\":[],\n            \"twoLevelHeader\"    : this.props.twoLevelHeader,\n            \"tableHeading\"      : this.props.tableHeading,\n            \"tableObjects\"      : this.props.tableObjects,\n            \"tableDatas\"        : this.props.tableDatas,\n            \"startRange\"        : 0,\n            \"limitRange\"        : 10\n            \n        }\n        this.handleFromChange = this.handleFromChange.bind(this);\n        this.handleToChange = this.handleToChange.bind(this);\n        \n    }\n\n    componentDidMount(){\n        this.dataTableList();\n        this.setState({\n            tableData : this.state.tableDatas.slice(this.state.startRange, this.state.limitRange),\n        });\n        this.handleFromChange = this.handleFromChange.bind(this);\n        this.handleToChange = this.handleToChange.bind(this);\n        \n    }\n    componentWillReceiveProps(nextProps){\n        if(nextProps.reportData){\n            this.setState({\n                reportData : nextProps.reportData\n            });\n        }\n    }\n    handleFromChange(event){\n        event.preventDefault();\n       const target = event.target;\n       const name = target.name;\n\n       this.setState({\n           [name] : event.target.value,\n       });\n\n       var dateVal = event.target.value;\n       var dateUpdate = new Date(dateVal);\n       // Session.set('newFromDate',dateUpdate);\n    }\n    handleToChange(event){\n        event.preventDefault();\n       const target = event.target;\n       const name = target.name;\n\n       this.setState({\n           [name] : event.target.value,\n       });\n\n       var dateVal = event.target.value;\n       var dateUpdate = new Date(dateVal);\n       // Session.set('newToDate',dateUpdate);\n    }\n\n    currentFromDate(){\n        // if(Session.get('newFromDate')){\n        //     var today = Session.get('newFromDate');\n        // } else {\n        //     var today = new Date();\n        // }\n        // var dd = today.getDate();\n        // var mm = today.getMonth()+1; //January is 0!\n        // var yyyy = today.getFullYear();\n        // if(dd<10){\n        //     dd='0'+dd;\n        // }\n        // if(mm<10){\n        //     mm='0'+mm;\n        // }\n        // var today = yyyy+'-'+mm+'-'+dd;\n        // var today = yyyy+'-'+mm+'-'+dd;\n\n        // return today;\n    }\n\n    currentToDate(){\n        // if(Session.get('newToDate')){\n        //     var today = Session.get('newToDate');\n        // } else {\n        //     var today = new Date();\n        // }\n        // // var today = new Date();\n        // var dd = today.getDate();\n        // var mm = today.getMonth()+1; //January is 0!\n        // var yyyy = today.getFullYear();\n        // if(dd<10){\n        //     dd='0'+dd;\n        // }\n        // if(mm<10){\n        //     mm='0'+mm;\n        // }\n        // var today = yyyy+'-'+mm+'-'+dd;\n        // var today = yyyy+'-'+mm+'-'+dd;\n\n        // return today;\n    }\n\n    dataTableList(){\n\t\t\n        \n  //       var selectedDateFrom = Session.get('newFromDate');\n\t\t// if(selectedDateFrom){\n\t\t// \tvar newDateFrom  = new Date(selectedDateFrom);\n\t\t// }else{\n\t\t// \tvar newDateFrom  = new Date();\n\t\t// }\n\n  //       var selectedDateTo = Session.get('newToDate');\n\t\t// if(selectedDateTo){\n\t\t// \tvar newDateTo  = new Date(selectedDateTo);\n\t\t// }else{\n\t\t// \tvar newDateTo  = new Date();\n  //       }\n        \n\t\t// var reportData = [];\n  //       if(this.props.selectedCategory){\n  //           if(this.props.selectedSubCategory){\n  //               reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: this.props.selectedCategory, subCategory: this.props.selectedSubCategory}}}, {sort: {'createdAt': -1}}).fetch();\n  //           }else{\n  //               reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: this.props.selectedCategory}}}, {sort: {'createdAt': -1}}).fetch();\n  //           }\n  //       }else{\n  //           reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid'}, {sort: {'createdAt': -1}}).fetch();\n  //       }\n  //       this.setState({\n  //           reportData : reportData\n  //       });\n    }\n    getData(startRange, limitRange){\n        this.setState({\n            tableData : this.state.tableDatas.slice(parseInt(startRange), parseInt(limitRange)),\n        },()=>{\n            console.log('tableData',this.state.tableData);\n        });\n    }\n    getSearchText(searchText, startRange, limitRange){\n        console.log(searchText, startRange, limitRange);\n        this.setState({\n            tableData : []\n        });\n    }\n    render(){\n        if(!this.props.loading){\n            return( \n                <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div className=\"sales-report-main-class\">\n                        <div className=\"reports-select-date-boxmain\">\n                            <div className=\"reports-select-date-boxsec\">\n                                <div className=\"reports-select-date-Title\">Customized Sales Report</div>\n                                <div className=\"reports-select-date-fromto\">\n                                    <div className=\"reports-select-date-from1\">\n                                        <div className=\"reports-select-date-from2\">\n                                            From\n                                        </div>\n                                        <div className=\"reports-select-date-from3\">\n                                            <input onChange={this.handleFromChange} name=\"fromDateCustomised\" ref=\"fromDateCustomised\" value={this.currentFromDate()} type=\"date\" className=\"reportsDateRef form-control\" placeholder=\"\"  />\n                                        </div>\n                                    </div>\n                                    <div className=\"reports-select-date-to1\">\n                                        <div className=\"reports-select-date-to2\">\n                                            To\n                                        </div>\n                                        <div className=\"reports-select-date-to3\">\n                                            <input onChange={this.handleToChange} name=\"toDateCustomised\" ref=\"toDateCustomised\" value={this.currentToDate()} type=\"date\" className=\"reportsDateRef form-control\" placeholder=\"\"   />\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"report-list-downloadMain\">\n                            <IAssureTable \n                                completeDataCount={this.state.tableDatas.length}\n                                twoLevelHeader={this.state.twoLevelHeader} \n                                editId={this.state.editSubId} \n                                getData={this.getData.bind(this)} \n                                tableHeading={this.state.tableHeading} \n                                tableData={this.state.tableData} \n                                tableObjects={this.state.tableObjects}\n                                getSearchText={this.getSearchText.bind(this)}/>\n                        </div>\n                    </div>\n                </div>\n                \n            );\n        }else{\n            return(\n                <div className=\"col-sm-12 col-xs-12 col-lg-8 col-lg-offset-4 col-md-12 loadingImg loaderDiv\"><img className=\"ldrImageforbulk\" src=\"/images/loadersglms.gif\" alt=\"loading\"/></div>\n            );\n        }\n    }\n}\n// CustomisedList = withTracker(props =>{\n//     var selectedDateFrom = Session.get('newFromDate');\n//     if(selectedDateFrom){\n//         var newDateFrom  = new Date(selectedDateFrom);\n//     }else{\n//         var newDateFrom  = new Date();\n//     }\n\n//     var selectedDateTo = Session.get('newToDate');\n//     if(selectedDateTo){\n//         var newDateTo  = new Date(selectedDateTo);\n//     }else{\n//         var newDateTo  = new Date();\n//     }\n        \n//     const reportHandle = Meteor.subscribe(\"OrdersData\");\n//     var reportData = [];\n//     if(props.selectedCategory){\n//         if(props.selectedSubCategory){\n//             reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: props.selectedCategory, subCategory: props.selectedSubCategory}}}, {sort: {'createdAt': -1}}).fetch();\n//         }else{\n//             reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid',  \"products\": { $elemMatch: { category: props.selectedCategory}}}, {sort: {'createdAt': -1}}).fetch();\n//         }\n//     }else{\n//         reportData =  Orders.find({'createdAt':{$gte : newDateFrom, $lt : newDateTo }, 'status' : 'Paid'}, {sort: {'createdAt': -1}}).fetch();\n//     }\n//     const loading = !reportHandle.ready();\n// return{\n//     loading,\n//     reportData,\n// };\n// })(CategoryWiseReportsCustomisedList);"]},"metadata":{},"sourceType":"module"}